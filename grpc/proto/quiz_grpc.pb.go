// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	Next(ctx context.Context, opts ...grpc.CallOption) (Quiz_NextClient, error)
	Signup(ctx context.Context, in *User, opts ...grpc.CallOption) (Quiz_SignupClient, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*User, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) Next(ctx context.Context, opts ...grpc.CallOption) (Quiz_NextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Quiz_serviceDesc.Streams[0], "/proto.Quiz/Next", opts...)
	if err != nil {
		return nil, err
	}
	x := &quizNextClient{stream}
	return x, nil
}

type Quiz_NextClient interface {
	Send(*Question) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type quizNextClient struct {
	grpc.ClientStream
}

func (x *quizNextClient) Send(m *Question) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quizNextClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quizClient) Signup(ctx context.Context, in *User, opts ...grpc.CallOption) (Quiz_SignupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Quiz_serviceDesc.Streams[1], "/proto.Quiz/Signup", opts...)
	if err != nil {
		return nil, err
	}
	x := &quizSignupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quiz_SignupClient interface {
	Recv() (*Question, error)
	grpc.ClientStream
}

type quizSignupClient struct {
	grpc.ClientStream
}

func (x *quizSignupClient) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quizClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.Quiz/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	Next(Quiz_NextServer) error
	Signup(*User, Quiz_SignupServer) error
	Vote(context.Context, *VoteRequest) (*User, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) Next(Quiz_NextServer) error {
	return status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedQuizServer) Signup(*User, Quiz_SignupServer) error {
	return status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedQuizServer) Vote(context.Context, *VoteRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	s.RegisterService(&_Quiz_serviceDesc, srv)
}

func _Quiz_Next_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServer).Next(&quizNextServer{stream})
}

type Quiz_NextServer interface {
	SendAndClose(*Void) error
	Recv() (*Question, error)
	grpc.ServerStream
}

type quizNextServer struct {
	grpc.ServerStream
}

func (x *quizNextServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quizNextServer) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Quiz_Signup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizServer).Signup(m, &quizSignupServer{stream})
}

type Quiz_SignupServer interface {
	Send(*Question) error
	grpc.ServerStream
}

type quizSignupServer struct {
	grpc.ServerStream
}

func (x *quizSignupServer) Send(m *Question) error {
	return x.ServerStream.SendMsg(m)
}

func _Quiz_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Quiz/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quiz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Quiz_Vote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Next",
			Handler:       _Quiz_Next_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Signup",
			Handler:       _Quiz_Signup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "quiz.proto",
}
